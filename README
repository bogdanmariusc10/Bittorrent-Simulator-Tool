CĂTĂNUȘ BOGDAN-MARIUS - 335CC

Pentru implementarea temei am folosit 5 structuri de date distincte:

- FileData pentru a retine informatiile despre un fisier;
- ClientData pentru a retine informatiile despre clienti;
- FileSwarm pentru a retine swarm-ul unui fisier;
- Message pentru a trimite si a primi mesaje prin MPI;
- SeedPriority pentru a retine prioritatile seed-urilor.

Functii ajutatoare:

- findFileSwarm: cauta un fisier in swarm-ul unui client;
- parseInputFile: citeste datele din fisierul de input;
- sentClientDataToTracker: trimite informatiile despre clienti catre tracker;
- receiveClientDataFromTracker: primeste informatiile despre clienti de la tracker;
- updateFileSwarm: actualizeaza swarm-ul unui client.

In vederea respectarii protocolului BitTorrent, am urmarit sa:

- trimit datele fiecarui client catre tracker;
- confirm ca datele au fost primite de tracker;
- incep sa trimit catre tracker cereri de primire seeds pentru fisierele de care
  clientul respectiv este interesat;
- trimit de la tracker catre clienti informatii despre seeds (swarm-ul fiecarui
  fisier);
- incep sa trimit catre seeds cereri de descarcare a segmentelor de fisiere pe
  rand;
- primesc de la seeds segmentele de fisiere si le scriu in fisierul de output;
- actualizez swarm-ul fiecarui client la fiecare 10 segmente descarcate;
- informez tracker-ul despre finalizarea descarcarii unui fisier si tracker-ul
  sa treaca clientul respectiv in lista de seed-uri;
- informez tracker-ul despre finalizarea descarcarii tuturor fisierelor unui
  client, inchiderea firului de download si mentinerea firului de upload;
- trimit de la tracker un mesaj pentru inchiderea firului de upload.

In vederea eficientei transferului de fisiere, am folosit o coada de prioritati
pentru a retine seed-urile in functie de numarul de utilizatori care descarca
prin ele. Astfel, am ales sa descarc segmente de la seed-urile cu cel mai mic
numar de utilizatori.
